/// <reference types="node" />
/**
 * Represents an barcode.
 */
export declare class Barcode {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets the name of the barcode type.
     */
    codeTypeName: string;
    /**
     * Gets the barcode value.
     */
    value: string;
    /**
     * Gets or sets the barcode download URL.
     */
    downloadUrl: string;
    constructor(init?: Partial<Barcode>);
}
/**
 * Represents page object with barcode.
 */
export declare class BarcodePage {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The index of the page.
     */
    index: number;
    constructor(init?: Partial<BarcodePage>);
}
/**
 * Barcodes result.
 */
export declare class BarcodesResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets a collection of barcodes.
     */
    barcodes: Array<Barcode>;
    constructor(init?: Partial<BarcodesResult>);
}
/**
 * Represents a container item like Zip archive entity, email attachment, PDF Portfolio item and so on.
 */
export declare class ContainerItem {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the name of the item.
     */
    name: string;
    /**
     * Gets or sets the full path of the item.
     */
    filePath: string;
    /**
     * Gets or sets the directory of the item.
     */
    directory: string;
    /**
     * Gets or sets the collection of metadata items.
     */
    metadata: {
        [key: string]: string;
    };
    constructor(init?: Partial<ContainerItem>);
}
/**
 * Container item info.
 */
export declare class ContainerItemInfo {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The relative path of the container.
     */
    relativePath: string;
    /**
     * Password for processing password-protected container item.
     */
    password: string;
    constructor(init?: Partial<ContainerItemInfo>);
}
/**
 * Container result.
 */
export declare class ContainerResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the collection of a container items like Zip archive entity, email attachment, PDF Portfolio item and so on.
     */
    containerItems: Array<ContainerItem>;
    constructor(init?: Partial<ContainerResult>);
}
/**
 * Class for rectangle coordinates.
 */
export declare class Coordinates {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the y-coordinate of the top edge of the rectangular area.
     */
    top: number;
    /**
     * Gets or sets the y-coordinate of the bottom edge of the rectangular area.
     */
    bottom: number;
    /**
     * Gets or sets the x-coordinate of the left edge of the rectangular area.
     */
    left: number;
    /**
     * Gets or sets the x-coordinate of the right edge of the rectangular area.
     */
    right: number;
    constructor(init?: Partial<Coordinates>);
}
/**
 * Template methods options.
 */
export declare class CreateTemplateOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the template.
     */
    template: Template;
    /**
     * Gets or sets the template path.
     */
    templatePath: string;
    /**
     * Gets or sets the name of the storage.
     */
    storageName: string;
    constructor(init?: Partial<CreateTemplateOptions>);
}
/**
 * Provides parameters for the table detection algorithms.
 */
export declare class DetectorParameters {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the minimum number of the table rows.
     */
    minRowCount: number;
    /**
     * Gets or sets the minimum number of the table columns.
     */
    minColumnCount: number;
    /**
     * Gets or sets the minimum space between the table columns.
     */
    minVerticalSpace: number;
    /**
     * Gets or sets the value that indicates whether the table has merged cells.
     */
    hasMergedCells: boolean;
    /**
     * Gets or sets the rectangular area that contains the table.
     */
    rectangle: Rectangle;
    /**
     * Gets or sets the table columns separators.
     */
    verticalSeparators: Array<number>;
    constructor(init?: Partial<DetectorParameters>);
}
/**
 * Class for disc space information.
 */
export declare class DiscUsage {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Application used disc space.
     */
    usedSize: number;
    /**
     * Total disc space.
     */
    totalSize: number;
    constructor(init?: Partial<DiscUsage>);
}
/**
 * The error details
 */
export declare class ErrorDetails {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The request id
     */
    requestId: string;
    /**
     * Date
     */
    date: Date;
    constructor(init?: Partial<ErrorDetails>);
}
/**
 * Field of document template
 */
export declare class Field {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * A unique template field name.
     */
    fieldName: string;
    /**
     * The page index. An integer value that represents the index of the page where the template item is located; null if the template item is located on any page.
     */
    pageIndex: number;
    /**
     * Defines the way how to find the field on a page.
     */
    fieldPosition: FieldPosition;
    constructor(init?: Partial<Field>);
}
/**
 * Class for document field data.
 */
export declare class FieldData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the field name.
     */
    name: string;
    /**
     * Gets or sets the index of the page.
     */
    pageIndex: number;
    /**
     * Gets or sets the value of the field.
     */
    pageArea: PageArea;
    /**
     * Gets or sets the linked data field.
     */
    linkedField: FieldData;
    constructor(init?: Partial<FieldData>);
}
/**
 * Field position class.
 */
export declare class FieldPosition {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Provides a template field position.
     */
    fieldPositionType: string;
    /**
     * Rectangular area on the page that bounds the field value.
     */
    rectangle: Rectangle;
    /**
     * Gets or sets the regular expression.
     */
    regex: string;
    /**
     * Gets or sets the value that indicates whether a text case isn't ignored.
     */
    matchCase: boolean;
    /**
     * Gets or sets the name of the linked field.
     */
    linkedFieldName: string;
    /**
     * Gets or sets the value that indicates whether a field is searched by the left from the linked field.
     */
    isLeftLinked: boolean;
    /**
     * Gets or sets a value indicating whether this instance is right linked.
     */
    isRightLinked: boolean;
    /**
     * Gets or sets a value indicating whether this instance is top linked.
     */
    isTopLinked: boolean;
    /**
     * Gets or sets a value indicating whether this instance is bottom linked.
     */
    isBottomLinked: boolean;
    /**
     * Gets or sets the size of the area where a field is searched.
     */
    searchArea: Size;
    /**
     * Gets or sets Gets the value that indicates whether SearchArea is scaled by the linked field size.
     */
    autoScale: boolean;
    constructor(init?: Partial<FieldPosition>);
}
/**
 * File info
 */
export declare class FileInfo {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File path in storage
     */
    filePath: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * Password to open file
     */
    password: string;
    constructor(init?: Partial<FileInfo>);
}
/**
 * Represents the file type.
 */
export declare class FileType {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the file type name e.g. \"Microsoft Word Document\".
     */
    fileFormat: string;
    /**
     * Gets or sets the filename suffix (including the period \".\") e.g. \".doc\".
     */
    extension: string;
    constructor(init?: Partial<FileType>);
}
/**
 * File versions FileVersion.
 */
export declare class FileVersions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File versions FileVersion.
     */
    value: Array<FileVersion>;
    constructor(init?: Partial<FileVersions>);
}
/**
 * Files list
 */
export declare class FilesList {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Files and folders contained by folder StorageFile.
     */
    value: Array<StorageFile>;
    constructor(init?: Partial<FilesList>);
}
/**
 * File upload result
 */
export declare class FilesUploadResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * List of uploaded file names
     */
    uploaded: Array<string>;
    /**
     * List of errors.
     */
    errors: Array<Error>;
    constructor(init?: Partial<FilesUploadResult>);
}
/**
 * File-format
 */
export declare class Format {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File extension
     */
    extension: string;
    /**
     * File format
     */
    fileFormat: string;
    constructor(init?: Partial<Format>);
}
/**
 * Describes object which contains list of supported file formats.
 */
export declare class FormatsResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Supported file formats.
     */
    formats: Array<Format>;
    constructor(init?: Partial<FormatsResult>);
}
/**
 * Provides the options which are used for formatted text extraction.
 */
export declare class FormattedTextOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the formatted text extraction mode.
     */
    mode: string;
    constructor(init?: Partial<FormattedTextOptions>);
}
/**
 * Represents an image.
 */
export declare class Image {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets The path of the image, located in the storage.
     */
    path: string;
    /**
     * Gets or sets the image download URL.
     */
    downloadUrl: string;
    /**
     * Gets or sets the index of the page.
     */
    pageIndex: number;
    /**
     * Gets or sets the rotation of the image in degrees.
     */
    rotation: number;
    /**
     * Gets or sets the image file format.
     */
    fileFormat: string;
    /**
     * Gets or sets the rectangle area of the image.
     */
    rectangle: Rectangle;
    constructor(init?: Partial<Image>);
}
/**
 * Represents page object with image collection.
 */
export declare class ImagePage {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The index of the page.
     */
    pageIndex: number;
    /**
     * collection of the page images.
     */
    images: Array<Image>;
    constructor(init?: Partial<ImagePage>);
}
/**
 * Images result.
 */
export declare class ImagesResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets a collection of images.
     */
    images: Array<Image>;
    /**
     * Collection of the extracted pages with images.
     */
    pages: Array<ImagePage>;
    constructor(init?: Partial<ImagesResult>);
}
/**
 * Info result.
 */
export declare class InfoResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the type of the file.
     */
    fileType: FileType;
    /**
     * Gets or sets the size of the document in bytes.
     */
    size: number;
    /**
     * Gets or sets the total number of document pages.
     */
    pageCount: number;
    /**
     * Gets or sets the encoding.
     */
    encoding: string;
    constructor(init?: Partial<InfoResult>);
}
/**
 * Error
 */
export declare class ModelError {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Code
     */
    code: string;
    /**
     * Message
     */
    message: string;
    /**
     * Description
     */
    description: string;
    /**
     * Inner Error
     */
    innerError: ErrorDetails;
    constructor(init?: Partial<ModelError>);
}
/**
 * Object exists
 */
export declare class ObjectExist {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Indicates that the file or folder exists.
     */
    exists: boolean;
    /**
     * True if it is a folder, false if it is a file.
     */
    isFolder: boolean;
    constructor(init?: Partial<ObjectExist>);
}
/**
 * The document page information such as page index and page size.
 */
export declare class Page {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the index of the page.
     */
    index: number;
    /**
     * Gets or sets the size of the page.
     */
    size: Size;
    constructor(init?: Partial<Page>);
}
/**
 * Class for document page area.
 */
export declare class PageArea {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the rectangular area.
     */
    rectangle: Rectangle;
    /**
     * Gets or sets the document page information such as page index and page size.
     */
    page: Page;
    /**
     * Gets or sets the text area. Represents a page text area which is used to represent a text value in the parsing by template functionality.
     */
    pageTextArea: PageTextArea;
    /**
     * Gets or sets the table area. Represents a table page area which is used to represent a table in the parsing by template functionality.
     */
    pageTableArea: PageTableArea;
    constructor(init?: Partial<PageArea>);
}
/**
 * Represents a table page area which is used to represent a table in the parsing by template functionality.
 */
export declare class PageTableArea {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the total number of the table rows.
     */
    rowCount: number;
    /**
     * Gets or sets the total number of the table columns.
     */
    columnCount: number;
    /**
     * Gets or sets the collection of table area cell.
     */
    pageTableAreaCells: Array<PageTableAreaCell>;
    constructor(init?: Partial<PageTableArea>);
}
/**
 * Represents a table cell.
 */
export declare class PageTableAreaCell {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the index of the column.
     */
    columnIndex: number;
    /**
     * Gets or sets the total number of columns that contain the table cell.
     */
    columnSpan: number;
    /**
     * Gets or sets the table cell value.
     */
    pageArea: PageArea;
    /**
     * Gets or sets the index of the row.
     */
    rowIndex: number;
    /**
     * Gets or sets the total number of rows that contain the table cell.
     */
    rowSpan: number;
    constructor(init?: Partial<PageTableAreaCell>);
}
/**
 * Represents a page text area which is used to represent a text value in the parsing by template functionality.
 */
export declare class PageTextArea {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the text.
     */
    text: string;
    /**
     * Gets or sets the base line.
     */
    baseLine: number;
    /**
     * Gets or sets the collection of child text page areas.
     */
    areas: Array<PageTextArea>;
    /**
     * Gets or sets the text style such as font size, font name an so on.
     */
    textStyle: TextStyle;
    constructor(init?: Partial<PageTextArea>);
}
/**
 * Parse result.
 */
export declare class ParseResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the total number of the fields data.
     */
    count: number;
    /**
     * Collection of the data fields.
     */
    fieldsData: Array<FieldData>;
    constructor(init?: Partial<ParseResult>);
}
/**
 * Base options class.
 */
export declare class ParserOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the file information.
     */
    fileInfo: FileInfo;
    /**
     * Gets or sets the container item information.
     */
    containerItemInfo: ContainerItemInfo;
    constructor(init?: Partial<ParserOptions>);
}
/**
 * Class for rectangle position model.
 */
export declare class Point {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the x-coordinate.
     */
    x: number;
    /**
     * Gets or sets the y-coordinate.
     */
    y: number;
    constructor(init?: Partial<Point>);
}
/**
 * Rectangular area on the page.
 */
export declare class Rectangle {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets the coordinates of the upper-left corner of the rectangular area.
     */
    position: Point;
    /**
     * Gets or sets the size of the rectangle.
     */
    size: Size;
    /**
     * Gets or sets the coordinates.
     */
    coordinates: Coordinates;
    constructor(init?: Partial<Rectangle>);
}
/**
 * Represents a size of rectangular area.
 */
export declare class Size {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the height.
     */
    height: number;
    /**
     * Gets or sets the width.
     */
    width: number;
    constructor(init?: Partial<Size>);
}
/**
 * Storage exists
 */
export declare class StorageExist {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Shows that the storage exists.
     */
    exists: boolean;
    constructor(init?: Partial<StorageExist>);
}
/**
 * File or folder information
 */
export declare class StorageFile {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File or folder name.
     */
    name: string;
    /**
     * True if it is a folder.
     */
    isFolder: boolean;
    /**
     * File or folder last modified DateTime.
     */
    modifiedDate: Date;
    /**
     * File or folder size.
     */
    size: number;
    /**
     * File or folder path.
     */
    path: string;
    constructor(init?: Partial<StorageFile>);
}
/**
 * Document template table
 */
export declare class Table {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets a unique template table name.
     */
    tableName: string;
    /**
     * The page index. An integer value that represents the index of the page where the template item is located; null if the template item is located on any page.
     */
    pageIndex: number;
    /**
     * Gets or sets the detector parameters. Provides parameters for the table detection algorithms.
     */
    detectorParameters: DetectorParameters;
    /**
     * Gets or sets the table layout. Provides the template table layout which is used by Table to define table position.
     */
    tableLayout: TableLayout;
    constructor(init?: Partial<Table>);
}
/**
 * Provides the template table layout which is used by Table to define table position.
 */
export declare class TableLayout {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the table columns separators.
     */
    verticalSeparators: Array<number>;
    /**
     * Gets or sets the table rows separators.
     */
    horizontalSeparators: Array<number>;
    constructor(init?: Partial<TableLayout>);
}
/**
 * User-generated template to extract metadata from the document.
 */
export declare class Template {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Template fields.
     */
    fields: Array<Field>;
    /**
     * Template tables.
     */
    tables: Array<Table>;
    constructor(init?: Partial<Template>);
}
/**
 * Template methods options.
 */
export declare class TemplateOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the template path.
     */
    templatePath: string;
    /**
     * Gets or sets the name of the storage.
     */
    storageName: string;
    constructor(init?: Partial<TemplateOptions>);
}
/**
 * Document template result.
 */
export declare class TemplateResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the template download URL.
     */
    url: string;
    /**
     * Gets or sets the path of the template, located in the storage.
     */
    templatePath: string;
    constructor(init?: Partial<TemplateResult>);
}
/**
 * Extracted text page class.
 */
export declare class TextPage {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the pageIndex.
     */
    pageIndex: number;
    /**
     * Gets or sets the text.
     */
    text: string;
    constructor(init?: Partial<TextPage>);
}
/**
 * The result od text extraction.
 */
export declare class TextResult {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the pages.
     */
    pages: Array<TextPage>;
    /**
     * Gets or sets the text.
     */
    text: string;
    constructor(init?: Partial<TextResult>);
}
/**
 * The text style such as font size, font name an so on.
 */
export declare class TextStyle {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the name of the font.
     */
    fontName: string;
    /**
     * Gets or sets the size of the font.
     */
    fontSize: number;
    /**
     * Gets or sets the value that indicates whether the font is bold.
     */
    isBold: boolean;
    /**
     * Gets or sets the value that indicates whether the font is italic.
     */
    isItalic: boolean;
    /**
     * Gets or sets the style name.
     */
    name: string;
    constructor(init?: Partial<TextStyle>);
}
/**
 * Barcode options.
 */
export declare class BarcodesOptions extends ParserOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the output path for extracted barcodes.
     */
    outputPath: string;
    /**
     * Gets or sets the zero-based start page index.
     */
    startPageNumber: number;
    /**
     * Gets or sets the number of pages to extract.
     */
    countPagesToExtract: number;
    constructor(init?: Partial<BarcodesOptions>);
}
/**
 * Container options.
 */
export declare class ContainerOptions extends ParserOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    constructor(init?: Partial<ContainerOptions>);
}
/**
 * File Version
 */
export declare class FileVersion extends StorageFile {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File Version ID.
     */
    versionId: string;
    /**
     * Specifies whether the file is (true) or is not (false) the latest version of an file.
     */
    isLatest: boolean;
    constructor(init?: Partial<FileVersion>);
}
/**
 * Image options.
 */
export declare class ImagesOptions extends ParserOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the output path for extracted images.
     */
    outputPath: string;
    /**
     * Gets or sets the zero-based start page index.
     */
    startPageNumber: number;
    /**
     * Gets or sets the number of pages to extract.
     */
    countPagesToExtract: number;
    constructor(init?: Partial<ImagesOptions>);
}
/**
 * Info options
 */
export declare class InfoOptions extends ParserOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    constructor(init?: Partial<InfoOptions>);
}
/**
 * Parse options.
 */
export declare class ParseOptions extends ParserOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * User-generated template to extract metadata from the document.
     */
    template: Template;
    /**
     * The path of the file, located in the storage, which contains a user-generated template to parse data. Is used when the Template parameter is not provided.
     */
    templatePath: string;
    constructor(init?: Partial<ParseOptions>);
}
/**
 * Extract options.
 */
export declare class TextOptions extends ParserOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Gets or sets the options which are used for formatted text extraction.
     */
    formattedTextOptions: FormattedTextOptions;
    /**
     * Gets or sets the zero-based start page index.
     */
    startPageNumber: number;
    /**
     * Gets or sets the number of pages to extract.
     */
    countPagesToExtract: number;
    constructor(init?: Partial<TextOptions>);
}
declare const enumsMap: {};
declare const typeMap: {
    Barcode: typeof Barcode;
    BarcodePage: typeof BarcodePage;
    BarcodesResult: typeof BarcodesResult;
    ContainerItem: typeof ContainerItem;
    ContainerItemInfo: typeof ContainerItemInfo;
    ContainerResult: typeof ContainerResult;
    Coordinates: typeof Coordinates;
    CreateTemplateOptions: typeof CreateTemplateOptions;
    DetectorParameters: typeof DetectorParameters;
    DiscUsage: typeof DiscUsage;
    ErrorDetails: typeof ErrorDetails;
    Field: typeof Field;
    FieldData: typeof FieldData;
    FieldPosition: typeof FieldPosition;
    FileInfo: typeof FileInfo;
    FileType: typeof FileType;
    FileVersions: typeof FileVersions;
    FilesList: typeof FilesList;
    FilesUploadResult: typeof FilesUploadResult;
    Format: typeof Format;
    FormatsResult: typeof FormatsResult;
    FormattedTextOptions: typeof FormattedTextOptions;
    Image: typeof Image;
    ImagePage: typeof ImagePage;
    ImagesResult: typeof ImagesResult;
    InfoResult: typeof InfoResult;
    ModelError: typeof ModelError;
    ObjectExist: typeof ObjectExist;
    Page: typeof Page;
    PageArea: typeof PageArea;
    PageTableArea: typeof PageTableArea;
    PageTableAreaCell: typeof PageTableAreaCell;
    PageTextArea: typeof PageTextArea;
    ParseResult: typeof ParseResult;
    ParserOptions: typeof ParserOptions;
    Point: typeof Point;
    Rectangle: typeof Rectangle;
    Size: typeof Size;
    StorageExist: typeof StorageExist;
    StorageFile: typeof StorageFile;
    Table: typeof Table;
    TableLayout: typeof TableLayout;
    Template: typeof Template;
    TemplateOptions: typeof TemplateOptions;
    TemplateResult: typeof TemplateResult;
    TextPage: typeof TextPage;
    TextResult: typeof TextResult;
    TextStyle: typeof TextStyle;
    BarcodesOptions: typeof BarcodesOptions;
    ContainerOptions: typeof ContainerOptions;
    FileVersion: typeof FileVersion;
    ImagesOptions: typeof ImagesOptions;
    InfoOptions: typeof InfoOptions;
    ParseOptions: typeof ParseOptions;
    TextOptions: typeof TextOptions;
};
export { enumsMap, typeMap };
/**
 * Request model for CopyFile operation.
 */
export declare class CopyFileRequest {
    /**
     * Source file path e.g. '/folder/file.ext'
     */
    srcPath: string;
    /**
     * Destination file path
     */
    destPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    /**
     * File version ID to copy
     */
    versionId: string;
    constructor(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string, versionId?: string);
}
/**
 * Request model for DeleteFile operation.
 */
export declare class DeleteFileRequest {
    /**
     * File path e.g. '/folder/file.ext'
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * File version ID to delete
     */
    versionId: string;
    constructor(path: string, storageName?: string, versionId?: string);
}
/**
 * Request model for DownloadFile operation.
 */
export declare class DownloadFileRequest {
    /**
     * File path e.g. '/folder/file.ext'
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * File version ID to download
     */
    versionId: string;
    constructor(path: string, storageName?: string, versionId?: string);
}
/**
 * Request model for MoveFile operation.
 */
export declare class MoveFileRequest {
    /**
     * Source file path e.g. '/src.ext'
     */
    srcPath: string;
    /**
     * Destination file path e.g. '/dest.ext'
     */
    destPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    /**
     * File version ID to move
     */
    versionId: string;
    constructor(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string, versionId?: string);
}
/**
 * Request model for UploadFile operation.
 */
export declare class UploadFileRequest {
    /**
     * Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.
     */
    path: string;
    /**
     * File to upload
     */
    file: Buffer;
    /**
     * Storage name
     */
    storageName: string;
    constructor(path: string, file: Buffer, storageName?: string);
}
/**
 * Request model for CopyFolder operation.
 */
export declare class CopyFolderRequest {
    /**
     * Source folder path e.g. '/src'
     */
    srcPath: string;
    /**
     * Destination folder path e.g. '/dst'
     */
    destPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    constructor(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string);
}
/**
 * Request model for CreateFolder operation.
 */
export declare class CreateFolderRequest {
    /**
     * Folder path to create e.g. 'folder_1/folder_2/'
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    constructor(path: string, storageName?: string);
}
/**
 * Request model for DeleteFolder operation.
 */
export declare class DeleteFolderRequest {
    /**
     * Folder path e.g. '/folder'
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * Enable to delete folders, subfolders and files
     */
    recursive: boolean;
    constructor(path: string, storageName?: string, recursive?: boolean);
}
/**
 * Request model for GetFilesList operation.
 */
export declare class GetFilesListRequest {
    /**
     * Folder path e.g. '/folder'
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    constructor(path: string, storageName?: string);
}
/**
 * Request model for MoveFolder operation.
 */
export declare class MoveFolderRequest {
    /**
     * Folder path to move e.g. '/folder'
     */
    srcPath: string;
    /**
     * Destination folder path to move to e.g '/dst'
     */
    destPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    constructor(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string);
}
/**
 * Request model for Container operation.
 */
export declare class ContainerRequest {
    /**
     * Container options.
     */
    options: ContainerOptions;
    constructor(options: ContainerOptions);
}
/**
 * Request model for GetInfo operation.
 */
export declare class GetInfoRequest {
    /**
     * Info options.
     */
    options: InfoOptions;
    constructor(options: InfoOptions);
}
/**
 * Request model for Barcodes operation.
 */
export declare class BarcodesRequest {
    /**
     * Extract barcode options.
     */
    options: BarcodesOptions;
    constructor(options: BarcodesOptions);
}
/**
 * Request model for Images operation.
 */
export declare class ImagesRequest {
    /**
     * Extract image options.
     */
    options: ImagesOptions;
    constructor(options: ImagesOptions);
}
/**
 * Request model for Parse operation.
 */
export declare class ParseRequest {
    /**
     * Parse options.
     */
    options: ParseOptions;
    constructor(options: ParseOptions);
}
/**
 * Request model for Text operation.
 */
export declare class TextRequest {
    /**
     * Extract text options.
     */
    options: TextOptions;
    constructor(options: TextOptions);
}
/**
 * Request model for GetDiscUsage operation.
 */
export declare class GetDiscUsageRequest {
    /**
     * Storage name
     */
    storageName: string;
    constructor(storageName?: string);
}
/**
 * Request model for GetFileVersions operation.
 */
export declare class GetFileVersionsRequest {
    /**
     * File path e.g. '/file.ext'
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    constructor(path: string, storageName?: string);
}
/**
 * Request model for ObjectExists operation.
 */
export declare class ObjectExistsRequest {
    /**
     * File or folder path e.g. '/file.ext' or '/folder'
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * File version ID
     */
    versionId: string;
    constructor(path: string, storageName?: string, versionId?: string);
}
/**
 * Request model for StorageExists operation.
 */
export declare class StorageExistsRequest {
    /**
     * Storage name
     */
    storageName: string;
    constructor(storageName: string);
}
/**
 * Request model for CreateTemplate operation.
 */
export declare class CreateTemplateRequest {
    /**
     * Create template options.
     */
    options: CreateTemplateOptions;
    constructor(options: CreateTemplateOptions);
}
/**
 * Request model for DeleteTemplate operation.
 */
export declare class DeleteTemplateRequest {
    /**
     * Delete template options.
     */
    options: TemplateOptions;
    constructor(options: TemplateOptions);
}
/**
 * Request model for GetTemplate operation.
 */
export declare class GetTemplateRequest {
    /**
     * Retrieve template options.
     */
    options: TemplateOptions;
    constructor(options: TemplateOptions);
}
