/// <reference types="node" />
import http = require("http");
import { Configuration } from "./configuration";
import * as model from "./model";
export * from "./model";
export * from "./configuration";
/**
 * GroupDocs.Parser Cloud API
 */
export declare class FileApi {
    /**
     * Creates new instance of FileApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): FileApi;
    /**
     * Creates new instance of FileApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): FileApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Copy file
     * @param requestObj contains request parameters
     */
    copyFile(requestObj: model.CopyFileRequest): Promise<http.IncomingMessage>;
    /**
     * Delete file
     * @param requestObj contains request parameters
     */
    deleteFile(requestObj: model.DeleteFileRequest): Promise<http.IncomingMessage>;
    /**
     * Download file
     * @param requestObj contains request parameters
     */
    downloadFile(requestObj: model.DownloadFileRequest): Promise<Buffer>;
    /**
     * Move file
     * @param requestObj contains request parameters
     */
    moveFile(requestObj: model.MoveFileRequest): Promise<http.IncomingMessage>;
    /**
     * Upload file
     * @param requestObj contains request parameters
     */
    uploadFile(requestObj: model.UploadFileRequest): Promise<model.FilesUploadResult>;
}
/**
 * GroupDocs.Parser Cloud API
 */
export declare class FolderApi {
    /**
     * Creates new instance of FolderApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): FolderApi;
    /**
     * Creates new instance of FolderApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): FolderApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Copy folder
     * @param requestObj contains request parameters
     */
    copyFolder(requestObj: model.CopyFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Create the folder
     * @param requestObj contains request parameters
     */
    createFolder(requestObj: model.CreateFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Delete folder
     * @param requestObj contains request parameters
     */
    deleteFolder(requestObj: model.DeleteFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Get all files and folders within a folder
     * @param requestObj contains request parameters
     */
    getFilesList(requestObj: model.GetFilesListRequest): Promise<model.FilesList>;
    /**
     * Move folder
     * @param requestObj contains request parameters
     */
    moveFolder(requestObj: model.MoveFolderRequest): Promise<http.IncomingMessage>;
}
/**
 * GroupDocs.Parser Cloud API
 */
export declare class InfoApi {
    /**
     * Creates new instance of InfoApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): InfoApi;
    /**
     * Creates new instance of InfoApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): InfoApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Retrieve a container items (relative paths) from document to work with formats that contain attachments, ZIP archives etc.
     * @param requestObj contains request parameters
     */
    container(requestObj: model.ContainerRequest): Promise<model.ContainerResult>;
    /**
     * Retrieve information about document.
     * @param requestObj contains request parameters
     */
    getInfo(requestObj: model.GetInfoRequest): Promise<model.InfoResult>;
    /**
     * List supported file formats.
     * @param requestObj contains request parameters
     */
    getSupportedFileFormats(): Promise<model.FormatsResult>;
}
/**
 * GroupDocs.Parser Cloud API
 */
export declare class ParseApi {
    /**
     * Creates new instance of ParseApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): ParseApi;
    /**
     * Creates new instance of ParseApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): ParseApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Extract barcodes from document.
     * @param requestObj contains request parameters
     */
    barcodes(requestObj: model.BarcodesRequest): Promise<model.BarcodesResult>;
    /**
     * Extract images from document.
     * @param requestObj contains request parameters
     */
    images(requestObj: model.ImagesRequest): Promise<model.ImagesResult>;
    /**
     * Extract document data by a predefined template.
     * @param requestObj contains request parameters
     */
    parse(requestObj: model.ParseRequest): Promise<model.ParseResult>;
    /**
     * Extract text from document.
     * @param requestObj contains request parameters
     */
    text(requestObj: model.TextRequest): Promise<model.TextResult>;
}
/**
 * GroupDocs.Parser Cloud API
 */
export declare class StorageApi {
    /**
     * Creates new instance of StorageApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): StorageApi;
    /**
     * Creates new instance of StorageApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): StorageApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Get disc usage
     * @param requestObj contains request parameters
     */
    getDiscUsage(requestObj: model.GetDiscUsageRequest): Promise<model.DiscUsage>;
    /**
     * Get file versions
     * @param requestObj contains request parameters
     */
    getFileVersions(requestObj: model.GetFileVersionsRequest): Promise<model.FileVersions>;
    /**
     * Check if file or folder exists
     * @param requestObj contains request parameters
     */
    objectExists(requestObj: model.ObjectExistsRequest): Promise<model.ObjectExist>;
    /**
     * Check if storage exists
     * @param requestObj contains request parameters
     */
    storageExists(requestObj: model.StorageExistsRequest): Promise<model.StorageExist>;
}
/**
 * GroupDocs.Parser Cloud API
 */
export declare class TemplateApi {
    /**
     * Creates new instance of TemplateApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): TemplateApi;
    /**
     * Creates new instance of TemplateApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): TemplateApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Create or update document template.
     * @param requestObj contains request parameters
     */
    createTemplate(requestObj: model.CreateTemplateRequest): Promise<model.TemplateResult>;
    /**
     * Delete document template.
     * @param requestObj contains request parameters
     */
    deleteTemplate(requestObj: model.DeleteTemplateRequest): Promise<http.IncomingMessage>;
    /**
     * Retrieve document template.
     * @param requestObj contains request parameters
     */
    getTemplate(requestObj: model.GetTemplateRequest): Promise<model.Template>;
}
