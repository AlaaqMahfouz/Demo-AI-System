"use strict";
/*
* The MIT License (MIT)
*
* Copyright (c) 2003-2023 Aspose Pty Ltd
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const api_client_1 = require("./api_client");
const configuration_1 = require("./configuration");
const serializer_1 = require("./serializer");
__export(require("./model"));
__export(require("./configuration"));
/**
 * GroupDocs.Parser Cloud API
 */
class FileApi {
    /**
     * Creates new instance of FileApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid, appKey) {
        const config = new configuration_1.Configuration(appSid, appKey);
        return new FileApi(config);
    }
    /**
     * Creates new instance of FileApi
     * @param config API configuration.
     */
    static fromConfig(config) {
        return new FileApi(config);
    }
    /**
     * @param config Configuration.
     */
    constructor(config) {
        this.configuration = config;
    }
    /**
     * Copy file
     * @param requestObj contains request parameters
     */
    copyFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling copyFile.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/file/copy/{srcPath}"
                .replace("{" + "srcPath" + "}", String(requestObj.srcPath));
            const queryParameters = {};
            // verify required parameter 'requestObj.srcPath' is not null or undefined
            if (requestObj.srcPath === null || requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was null or undefined when calling copyFile.');
            }
            // verify required parameter 'requestObj.destPath' is not null or undefined
            if (requestObj.destPath === null || requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was null or undefined when calling copyFile.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Delete file
     * @param requestObj contains request parameters
     */
    deleteFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFile.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/file/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling deleteFile.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Download file
     * @param requestObj contains request parameters
     */
    downloadFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling downloadFile.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/file/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling downloadFile.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                encoding: null,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "Buffer");
            return Promise.resolve(result);
        });
    }
    /**
     * Move file
     * @param requestObj contains request parameters
     */
    moveFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling moveFile.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/file/move/{srcPath}"
                .replace("{" + "srcPath" + "}", String(requestObj.srcPath));
            const queryParameters = {};
            // verify required parameter 'requestObj.srcPath' is not null or undefined
            if (requestObj.srcPath === null || requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was null or undefined when calling moveFile.');
            }
            // verify required parameter 'requestObj.destPath' is not null or undefined
            if (requestObj.destPath === null || requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was null or undefined when calling moveFile.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Upload file
     * @param requestObj contains request parameters
     */
    uploadFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling uploadFile.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/file/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            const formParams = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling uploadFile.');
            }
            // verify required parameter 'requestObj.file' is not null or undefined
            if (requestObj.file === null || requestObj.file === undefined) {
                throw new Error('Required parameter "requestObj.file" was null or undefined when calling uploadFile.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            if (requestObj.file !== undefined) {
                formParams.File = {
                    value: requestObj.file,
                    options: {
                        filename: "file.name",
                    },
                };
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            requestOptions.formData = formParams;
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "FilesUploadResult");
            return Promise.resolve(result);
        });
    }
}
exports.FileApi = FileApi;
/**
 * GroupDocs.Parser Cloud API
 */
class FolderApi {
    /**
     * Creates new instance of FolderApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid, appKey) {
        const config = new configuration_1.Configuration(appSid, appKey);
        return new FolderApi(config);
    }
    /**
     * Creates new instance of FolderApi
     * @param config API configuration.
     */
    static fromConfig(config) {
        return new FolderApi(config);
    }
    /**
     * @param config Configuration.
     */
    constructor(config) {
        this.configuration = config;
    }
    /**
     * Copy folder
     * @param requestObj contains request parameters
     */
    copyFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling copyFolder.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/folder/copy/{srcPath}"
                .replace("{" + "srcPath" + "}", String(requestObj.srcPath));
            const queryParameters = {};
            // verify required parameter 'requestObj.srcPath' is not null or undefined
            if (requestObj.srcPath === null || requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was null or undefined when calling copyFolder.');
            }
            // verify required parameter 'requestObj.destPath' is not null or undefined
            if (requestObj.destPath === null || requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was null or undefined when calling copyFolder.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Create the folder
     * @param requestObj contains request parameters
     */
    createFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling createFolder.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/folder/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling createFolder.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Delete folder
     * @param requestObj contains request parameters
     */
    deleteFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteFolder.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/folder/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling deleteFolder.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "recursive", requestObj.recursive);
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Get all files and folders within a folder
     * @param requestObj contains request parameters
     */
    getFilesList(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFilesList.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/folder/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling getFilesList.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "FilesList");
            return Promise.resolve(result);
        });
    }
    /**
     * Move folder
     * @param requestObj contains request parameters
     */
    moveFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling moveFolder.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/folder/move/{srcPath}"
                .replace("{" + "srcPath" + "}", String(requestObj.srcPath));
            const queryParameters = {};
            // verify required parameter 'requestObj.srcPath' is not null or undefined
            if (requestObj.srcPath === null || requestObj.srcPath === undefined) {
                throw new Error('Required parameter "requestObj.srcPath" was null or undefined when calling moveFolder.');
            }
            // verify required parameter 'requestObj.destPath' is not null or undefined
            if (requestObj.destPath === null || requestObj.destPath === undefined) {
                throw new Error('Required parameter "requestObj.destPath" was null or undefined when calling moveFolder.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destPath", requestObj.destPath);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "srcStorageName", requestObj.srcStorageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "destStorageName", requestObj.destStorageName);
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
}
exports.FolderApi = FolderApi;
/**
 * GroupDocs.Parser Cloud API
 */
class InfoApi {
    /**
     * Creates new instance of InfoApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid, appKey) {
        const config = new configuration_1.Configuration(appSid, appKey);
        return new InfoApi(config);
    }
    /**
     * Creates new instance of InfoApi
     * @param config API configuration.
     */
    static fromConfig(config) {
        return new InfoApi(config);
    }
    /**
     * @param config Configuration.
     */
    constructor(config) {
        this.configuration = config;
    }
    /**
     * Retrieve a container items (relative paths) from document to work with formats that contain attachments, ZIP archives etc.
     * @param requestObj contains request parameters
     */
    container(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling container.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/container";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling container.');
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "ContainerOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "ContainerResult");
            return Promise.resolve(result);
        });
    }
    /**
     * Retrieve information about document.
     * @param requestObj contains request parameters
     */
    getInfo(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getInfo.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/info";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling getInfo.');
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "InfoOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "InfoResult");
            return Promise.resolve(result);
        });
    }
    /**
     * List supported file formats.
     * @param requestObj contains request parameters
     */
    getSupportedFileFormats() {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.configuration.getServerUrl() + "/parser/formats";
            const queryParameters = {};
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "FormatsResult");
            return Promise.resolve(result);
        });
    }
}
exports.InfoApi = InfoApi;
/**
 * GroupDocs.Parser Cloud API
 */
class ParseApi {
    /**
     * Creates new instance of ParseApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid, appKey) {
        const config = new configuration_1.Configuration(appSid, appKey);
        return new ParseApi(config);
    }
    /**
     * Creates new instance of ParseApi
     * @param config API configuration.
     */
    static fromConfig(config) {
        return new ParseApi(config);
    }
    /**
     * @param config Configuration.
     */
    constructor(config) {
        this.configuration = config;
    }
    /**
     * Extract barcodes from document.
     * @param requestObj contains request parameters
     */
    barcodes(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling barcodes.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/barcodes";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling barcodes.');
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "BarcodesOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "BarcodesResult");
            return Promise.resolve(result);
        });
    }
    /**
     * Extract images from document.
     * @param requestObj contains request parameters
     */
    images(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling images.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/images";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling images.');
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "ImagesOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "ImagesResult");
            return Promise.resolve(result);
        });
    }
    /**
     * Extract document data by a predefined template.
     * @param requestObj contains request parameters
     */
    parse(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling parse.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/parse";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling parse.');
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "ParseOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "ParseResult");
            return Promise.resolve(result);
        });
    }
    /**
     * Extract text from document.
     * @param requestObj contains request parameters
     */
    text(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling text.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/text";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling text.');
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "TextOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "TextResult");
            return Promise.resolve(result);
        });
    }
}
exports.ParseApi = ParseApi;
/**
 * GroupDocs.Parser Cloud API
 */
class StorageApi {
    /**
     * Creates new instance of StorageApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid, appKey) {
        const config = new configuration_1.Configuration(appSid, appKey);
        return new StorageApi(config);
    }
    /**
     * Creates new instance of StorageApi
     * @param config API configuration.
     */
    static fromConfig(config) {
        return new StorageApi(config);
    }
    /**
     * @param config Configuration.
     */
    constructor(config) {
        this.configuration = config;
    }
    /**
     * Get disc usage
     * @param requestObj contains request parameters
     */
    getDiscUsage(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getDiscUsage.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/disc";
            const queryParameters = {};
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "DiscUsage");
            return Promise.resolve(result);
        });
    }
    /**
     * Get file versions
     * @param requestObj contains request parameters
     */
    getFileVersions(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getFileVersions.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/version/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling getFileVersions.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "FileVersions");
            return Promise.resolve(result);
        });
    }
    /**
     * Check if file or folder exists
     * @param requestObj contains request parameters
     */
    objectExists(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling objectExists.');
            }
            let localVarPath = this.configuration.getServerUrl() + "/parser/storage/exist/{path}"
                .replace("{" + "path" + "}", String(requestObj.path));
            const queryParameters = {};
            // verify required parameter 'requestObj.path' is not null or undefined
            if (requestObj.path === null || requestObj.path === undefined) {
                throw new Error('Required parameter "requestObj.path" was null or undefined when calling objectExists.');
            }
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "storageName", requestObj.storageName);
            localVarPath = api_client_1.addQueryParameterToUrl(localVarPath, queryParameters, "versionId", requestObj.versionId);
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "ObjectExist");
            return Promise.resolve(result);
        });
    }
    /**
     * Check if storage exists
     * @param requestObj contains request parameters
     */
    storageExists(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling storageExists.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/storage/{storageName}/exist"
                .replace("{" + "storageName" + "}", String(requestObj.storageName));
            const queryParameters = {};
            // verify required parameter 'requestObj.storageName' is not null or undefined
            if (requestObj.storageName === null || requestObj.storageName === undefined) {
                throw new Error('Required parameter "requestObj.storageName" was null or undefined when calling storageExists.');
            }
            const requestOptions = {
                method: "GET",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "StorageExist");
            return Promise.resolve(result);
        });
    }
}
exports.StorageApi = StorageApi;
/**
 * GroupDocs.Parser Cloud API
 */
class TemplateApi {
    /**
     * Creates new instance of TemplateApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid, appKey) {
        const config = new configuration_1.Configuration(appSid, appKey);
        return new TemplateApi(config);
    }
    /**
     * Creates new instance of TemplateApi
     * @param config API configuration.
     */
    static fromConfig(config) {
        return new TemplateApi(config);
    }
    /**
     * @param config Configuration.
     */
    constructor(config) {
        this.configuration = config;
    }
    /**
     * Create or update document template.
     * @param requestObj contains request parameters
     */
    createTemplate(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling createTemplate.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/template";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling createTemplate.');
            }
            const requestOptions = {
                method: "PUT",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "CreateTemplateOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "TemplateResult");
            return Promise.resolve(result);
        });
    }
    /**
     * Delete document template.
     * @param requestObj contains request parameters
     */
    deleteTemplate(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling deleteTemplate.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/template";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling deleteTemplate.');
            }
            const requestOptions = {
                method: "DELETE",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "TemplateOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Retrieve document template.
     * @param requestObj contains request parameters
     */
    getTemplate(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "requestObj" was null or undefined when calling getTemplate.');
            }
            const localVarPath = this.configuration.getServerUrl() + "/parser/template";
            const queryParameters = {};
            // verify required parameter 'requestObj.options' is not null or undefined
            if (requestObj.options === null || requestObj.options === undefined) {
                throw new Error('Required parameter "requestObj.options" was null or undefined when calling getTemplate.');
            }
            const requestOptions = {
                method: "POST",
                qs: queryParameters,
                uri: localVarPath,
                json: true,
                body: serializer_1.Serializer.serialize(requestObj.options, requestObj.options.constructor.name === "Object" ? "TemplateOptions" : requestObj.options.constructor.name),
            };
            const response = yield api_client_1.invokeApiMethod(requestOptions, this.configuration);
            const result = serializer_1.Serializer.deserialize(response.body, "Template");
            return Promise.resolve(result);
        });
    }
}
exports.TemplateApi = TemplateApi;
